/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package projectsda;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import javax.swing.*;
import java.text.SimpleDateFormat;  
import java.util.Date; 
import java.sql.*; 
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.util.*; 
import net.proteanit.sql.DbUtils;
import javax.swing.table.*;
import javax.swing.table.DefaultTableModel;  
import javax.swing.JOptionPane;

/**
 *
 * @author dell
 */
public class setevaluations extends javax.swing.JFrame {
         String crs;
         String sec;
         private Connection conn;
         private PreparedStatement st;
         private Statement st1;
         private Statement st2;
         private Statement stmt;
         private Statement stmt1;
         private Statement stmt2;
  
    public setevaluations() {
         try{  String s = "jdbc:sqlserver://localhost:1433;databaseName=java";
            conn= DriverManager.getConnection(s, "maan", "maan");
            stmt = conn.createStatement();
        initComponents();
         
       } catch (Exception e) {
            System.out.println(e);
        }
    }

   public  void showRegs(String course,String section) {
     
          
          this.crs=course;
          this.sec= section;
          
        try {
              int index=0;
          String nam=this.crs+this.sec+"_table";
              stmt1 = conn.createStatement();
            String qry="if exists (select 1 from INFORMATION_SCHEMA.TABLES where TABLE_TYPE='BASE TABLE' AND TABLE_NAME='"+nam+"') select 1 as res else select 0 as res;";
               ResultSet rs = stmt1.executeQuery(qry);
                      
             while (rs.next()) {
                 
                 index=Integer.parseInt((rs.getString(1)));
                        }  
             
             if(index==0){
                           st=conn.prepareStatement("select student.id, student.name from Registrations r join student on r.Student_id=student.id join section s on s.s_id=r.sec_id join Courses c on c.Courseid=r.Course_id where c.CourseName = ? and s.sec_name = ?");
                           st.setString(1,course);
                           st.setString(2, section);

        
         
             ResultSet rv=st.executeQuery();
             tableeve.setModel(DbUtils.resultSetToTableModel(rv));
            
             }
             else if(index==1){
                  stmt = conn.createStatement();  
             String sql= "select* from "+nam;
             ResultSet rv=stmt.executeQuery(sql);
             tableeve.setModel(DbUtils.resultSetToTableModel(rv));
              
            
             }
        } 
        catch (Exception e) {
            System.out.println(e);
        }
         
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableeve = new javax.swing.JTable();
        back = new javax.swing.JButton();
        add = new javax.swing.JButton();
        save = new javax.swing.JButton();
        drop = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(750, 480));
        getContentPane().setLayout(null);

        tableeve.setBackground(new java.awt.Color(153, 204, 255));
        tableeve.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tableeve.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableeve);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 21, 510, 350);

        back.setText("back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        getContentPane().add(back);
        back.setBounds(10, 417, 55, 23);

        add.setText("Add Evaluation");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        getContentPane().add(add);
        add.setBounds(550, 20, 127, 23);

        save.setText("save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        getContentPane().add(save);
        save.setBounds(420, 380, 81, 23);

        drop.setText("Drop Evaluation");
        drop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropActionPerformed(evt);
            }
        });
        getContentPane().add(drop);
        drop.setBounds(550, 60, 127, 23);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projectsda/proj.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(4, -6, 750, 490);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        teachercoures tp = new teachercoures();   
            this.setVisible(false);
            tp.setVisible(true);
             tp.ShowCourses();
    }//GEN-LAST:event_backActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed

  DefaultTableModel dm=(DefaultTableModel)tableeve.getModel();
  String in = JOptionPane.showInputDialog("Enter assignment name");
  dm.addColumn(in);
  tableeve.setModel(dm);
  
    }//GEN-LAST:event_addActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
         Vector<String> colums=new Vector();
        for (int i = 0; i <tableeve.getColumnCount(); i++) {  
    String m=String.valueOf(tableeve.getColumnModel().getColumn(i).getHeaderValue());
     colums.addElement(m);
        }
        //code
        DefaultTableModel dtm = (DefaultTableModel) tableeve.getModel();
    int r = dtm.getRowCount();
    int c = dtm.getColumnCount();
    String[][] data = new String[r][c];
    for (int i = 0 ; i < r ; i++){
        for (int j = 0 ; j < c ; j++){
             data[i][j] =  String.valueOf(dtm.getValueAt(i,j));
             if(data[i][j].length() == 0 || data[i][j] == null )
             {
                 data[i][j] ="0";
             }
            }
    }
    
    for (int i = 0 ; i < r ; i++){
        for (int j = 0 ; j < c ; j++){
            System.out.println(data[i][j]);  }
    }   
        
       try {
            
            int bol=0;
            String nam=this.crs+this.sec+"_table";
              stmt1 = conn.createStatement();
            String sq="IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE' AND TABLE_NAME='"+nam+"') SELECT 1 AS res ELSE SELECT 0 AS res;";
              
               ResultSet rs = stmt1.executeQuery(sq);
                      
             while (rs.next()) {
                 
                 bol=Integer.parseInt((rs.getString(1)));
                        }
            
            if(bol==0){
            
                System.out.println(bol);
            stmt = conn.createStatement();  
            
           
                    
            String sql = "CREATE TABLE"+" "+nam+"( studentid int, FOREIGN KEY(studentid) REFERENCES student(id),studentname varchar(50),";
            
               for (int i = 2; i <tableeve.getColumnCount(); i++){
                      
               if(i==tableeve.getColumnCount()-1){
               
                    sql=sql+colums.get(i)+" "+"int"; 
               }
               else{
                 sql=sql+colums.get(i)+" "+"int"+","; 
               
               }
               }
            sql=sql+");";
            
             System.out.println(sql);
            
             stmt.executeUpdate(sql);
             
             st1= conn.createStatement();
             
               for (int i = 0; i <tableeve.getRowCount(); i++){
             String sql1= "INSERT INTO"+" "+nam+"(studentid,studentname,";
             if(tableeve.getColumnCount()==2){
              sql1=null;
              sql1= "INSERT INTO"+" "+nam+"(studentid,studentname)";
             }
                for (int j = 2; j <tableeve.getColumnCount(); j++){
                      
               if(j==tableeve.getColumnCount()-1){
               
                    sql1=sql1+colums.get(j)+" "+")"; 
               }
               else{
                 sql1=sql1+colums.get(j)+" "+","; 
               
               }
               }
                sql1=sql1+" "+"values (";
                 for (int k = 0; k <tableeve.getColumnCount(); k++){
                     if(k==tableeve.getColumnCount()-1){
               
                    sql1=sql1+"'"+data[i][k]+"'"+")"; 
                   
               }
               else{
                  sql1=sql1+"'"+data[i][k]+"'"+","; 
               
               }
                 
                 }
                 st1.executeUpdate(sql1);
               }
            }
            else if(bol==1){
                stmt2= conn.createStatement();  
                String sqll="DROP TABLE"+" "+nam+";";
               stmt2.executeUpdate(sqll);
            
            
                stmt = conn.createStatement();  
           
           
                    
            String sql = "CREATE TABLE"+" "+nam+"( studentid int FOREIGN KEY REFERENCES student(id) ,studentname varchar(50),";
            
               for (int i = 2; i <tableeve.getColumnCount(); i++){
                      
               if(i==tableeve.getColumnCount()-1){
               
                    sql=sql+colums.get(i)+" "+"int"; 
               }
               else{
                 sql=sql+colums.get(i)+" "+"int"+","; 
               
               }
               }
            sql=sql+");";
            
           // System.out.println(sql);
            
             stmt.executeUpdate(sql);
             st2= conn.createStatement();
             
               for (int i = 0; i <tableeve.getRowCount(); i++){
             String sql1= "INSERT INTO"+" "+nam+"(studentid,studentname,";
             if(tableeve.getColumnCount()==2){
              sql1=null;
              sql1= "INSERT INTO"+" "+nam+"(studentid,studentname)";
             }
                for (int j = 2; j <tableeve.getColumnCount(); j++){
                      
               if(j==tableeve.getColumnCount()-1){
               
                    sql1=sql1+colums.get(j)+" "+")"; 
               }
               else{
                 sql1=sql1+colums.get(j)+" "+","; 
               
               }
               }
                sql1=sql1+" "+"values (";
                 for (int k = 0; k <tableeve.getColumnCount(); k++){
                     if(k==tableeve.getColumnCount()-1){
               
                    sql1=sql1+"'"+data[i][k]+"'"+")"; 
                   
               }
               else{
                  sql1=sql1+"'"+data[i][k]+"'"+","; 
               
               }
                 
                 }
                 st2.executeUpdate(sql1);
               }
            
        }
           
        } catch (Exception e) {
            System.out.println(e);
        }
    
    }//GEN-LAST:event_saveActionPerformed

    private void dropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropActionPerformed
      DefaultTableModel dm=(DefaultTableModel)tableeve.getModel();
      TableColumnModel model = tableeve.getColumnModel();
  String input = JOptionPane.showInputDialog("Enter evaluation name");
  int index = model.getColumnIndex(input);

TableColumn tcol = model.getColumn(index);
  tableeve.removeColumn(tcol);
        
    }//GEN-LAST:event_dropActionPerformed

    
      
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(setevaluations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(setevaluations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(setevaluations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(setevaluations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new setevaluations().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton back;
    private javax.swing.JButton drop;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton save;
    private javax.swing.JTable tableeve;
    // End of variables declaration//GEN-END:variables

}
